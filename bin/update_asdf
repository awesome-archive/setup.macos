#!/bin/sh
# -*- mode: sh -*-
# vim: set ft=sh :

set -eu
cd "$(cd "$(dirname "$0")"; pwd)"

if ! which asdf > /dev/null 2>&1
then
  echo 'Warn: skipped the ASDF updating because it is not found on this system.'
  exit
fi

resolve_version() {
  case "${2}" in
    *lts*)
      asdf latest "${1}" "${2}"
      asdf uninstall "${1}" "${2}"
      echo "${2}"
      ;;
    *latest*)
      echo "${2}"
      ;;
    *)
      asdf latest "${1}" "${2}"
      ;;
  esac
}

install_via_asdf() {
  TARGET_VERSION="$(resolve_version "${1}" "${2}")"
  set +e
  asdf install "${1}" "${TARGET_VERSION}"
  asdf global "${1}" "${TARGET_VERSION}"
  remove_obsolete_versions "${1}" "${2}"
  set -e
}

install_nodejs_deps() {
  . "${HOME}/.zsh.d/z-asdf"

  # https://qiita.com/Qoo_Rus/items/afb52517e0e17b720990
  npm install -g --silent agentkeepalive@latest
  npm install -g --silent npm@"${1}"
  npm upgrade -g --silent
  corepack enable
  asdf reshim
}

remove_obsolete_versions() {
  case "${2}" in
    *lts*)
      ;;
    *latest*)
      ;;
    *)
      for v in $(asdf list "${1}" "${2}" | sort -V | sed -e '$d')
      do
        asdf uninstall "${1}" "${v}"
      done
      ;;
  esac
}

install_nodejs() {
  set +e
  TARGET_VER=$(resolve_version nodejs "${1}")
  if asdf install nodejs "${TARGET_VER}"
  then
    asdf global nodejs "${TARGET_VER}"
  else
    echo "Fallback: Build the Node.js v${TARGET_VER} from source..."
    NODEJS_CONFIGURE_OPTIONS='--with-intl=full-icu --download=all' \
      NODEJS_CHECK_SIGNATURES='no' \
      asdf install nodejs "ref:v${TARGET_VER}"
    asdf global nodejs "ref:v${TARGET_VER}"
  fi
  remove_obsolete_versions nodejs "${1}"
  install_nodejs_deps "${2}"
  set -e
}

asdf plugin update --all

install_via_asdf python 2
install_via_asdf python 3
install_via_asdf python latest

export ASDF_NODEJS_LEGACY_FILE_DYNAMIC_STRATEGY=latest_installed

install_nodejs 18 9
install_nodejs lts-hydrogen 9
install_nodejs 20 10
install_nodejs lts-iron 10
install_nodejs lts 10
install_nodejs 21 10
install_nodejs latest 10
